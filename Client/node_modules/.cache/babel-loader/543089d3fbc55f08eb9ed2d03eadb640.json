{"ast":null,"code":"import { slicedToArray as _slicedToArray } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport { useState, useEffect } from 'react';\nimport createFocusTrap from 'focus-trap';\n\nfunction toggleTrap(trap, isActive) {\n  if (isActive) {\n    trap.activate();\n  } else {\n    trap.deactivate();\n  }\n}\n/**\n * React Hook for trapping the focus inside a particular DOM element. Useful for building modal\n * components.\n *\n * @param element  The element to trap focus inside of\n * @param isActive Whether or not to activate the trap\n */\n\n\nfunction useFocusTrap(element) {\n  var isActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      trap = _useState2[0],\n      setTrap = _useState2[1];\n\n  useEffect(function () {\n    // If we've already created a trap, toggle it based on the isActive status\n    if (trap) {\n      toggleTrap(trap, isActive); // Otherwise, if there's no trap, but there is a valid element that needs to be trapped\n    } else if (element) {\n      // Create the trap and store a reference to it\n      var newTrap = createFocusTrap(element, {\n        clickOutsideDeactivates: true,\n        // Set initial focus to the modal wrapper itself instead of focusing on the first\n        // focusable element by default\n        initialFocus: element\n      });\n      setTrap(newTrap); // And toggle it based on isActive status\n\n      toggleTrap(newTrap, isActive);\n    } // When the component unmounts, we deactivate the trap, if there is one\n\n\n    return function () {\n      if (trap) {\n        trap.deactivate();\n      }\n    };\n  }, [element, isActive, trap]);\n}\n\nexport default useFocusTrap;","map":{"version":3,"sources":["../../../utils/use-focus-trap.ts"],"names":["trap","isActive","setTrap","useState","useEffect","toggleTrap","newTrap","createFocusTrap","clickOutsideDeactivates","initialFocus","element"],"mappings":";;;;AAGA,SAAA,UAAA,CAAA,IAAA,EAAA,QAAA,EAA8D;MAC1D,Q,EAAc;AACVA,IAAAA,IAAI,CAAJA,QAAAA;AADJ,G,MAEO;AACHA,IAAAA,IAAI,CAAJA,UAAAA;;;;;;;;;;;;AAWO,SAAA,YAAA,CAAA,OAAA,EAA2E;MAAxBC,QAAwB,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAb,K;;kBACjDE,QAD8D,E;;MAC/EH,IAD+E,GAAA,UAAA,CAAA,CAAA,C;MACzEE,OADyE,GAAA,UAAA,CAAA,CAAA,C;;AAGtFE,EAAAA,SAAS,CAAC,YAAoB;;QAE1B,I,EAAU;AACNC,MAAAA,UAAU,CAAA,IAAA,EADJ,QACI,CAAVA,CADM,CAAA;AAAV,K,MAGO,IAAA,OAAA,EAAa;;UAEVC,OAAO,GAAGC,eAAe,CAAA,OAAA,EAAU;AACrCC,QAAAA,uBAAuB,EADc,IAAA;;;AAIrCC,QAAAA,YAAY,EAAEC;AAJuB,OAAV,C;AAM/BR,MAAAA,OAAO,CARS,OAQT,CAAPA,CARgB,CAAA;;AAUhBG,MAAAA,UAAU,CAAA,OAAA,EAAVA,QAAU,CAAVA;AAfsB,KAAA,CAAA;;;WAmBnB,YAAY;UACf,I,EAAU;AACNL,QAAAA,IAAI,CAAJA,UAAAA;;AAFR,K;AAnBK,GAAA,EAwBN,CAAA,OAAA,EAAA,QAAA,EAxBHI,IAwBG,CAxBM,CAATA","sourcesContent":["import { useState, useEffect } from 'react';\nimport createFocusTrap, { FocusTrap } from 'focus-trap';\n\nfunction toggleTrap(trap: FocusTrap, isActive: boolean): void {\n    if (isActive) {\n        trap.activate();\n    } else {\n        trap.deactivate();\n    }\n}\n\n/**\n * React Hook for trapping the focus inside a particular DOM element. Useful for building modal\n * components.\n *\n * @param element  The element to trap focus inside of\n * @param isActive Whether or not to activate the trap\n */\nexport default function useFocusTrap(element: HTMLElement | null, isActive = false): void {\n    const [trap, setTrap] = useState<FocusTrap>();\n\n    useEffect((): (() => void) => {\n        // If we've already created a trap, toggle it based on the isActive status\n        if (trap) {\n            toggleTrap(trap, isActive);\n            // Otherwise, if there's no trap, but there is a valid element that needs to be trapped\n        } else if (element) {\n            // Create the trap and store a reference to it\n            const newTrap = createFocusTrap(element, {\n                clickOutsideDeactivates: true,\n                // Set initial focus to the modal wrapper itself instead of focusing on the first\n                // focusable element by default\n                initialFocus: element,\n            });\n            setTrap(newTrap);\n            // And toggle it based on isActive status\n            toggleTrap(newTrap, isActive);\n        }\n\n        // When the component unmounts, we deactivate the trap, if there is one\n        return (): void => {\n            if (trap) {\n                trap.deactivate();\n            }\n        };\n    }, [element, isActive, trap]);\n}\n"]},"metadata":{},"sourceType":"module"}