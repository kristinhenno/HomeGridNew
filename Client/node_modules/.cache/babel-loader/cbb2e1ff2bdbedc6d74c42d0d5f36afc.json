{"ast":null,"code":"import { defineProperty as _defineProperty, extends as _extends } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React from 'react';\nimport classNames from 'classnames';\nimport warning from 'warning';\nimport getAnchorProps from './get-anchor-props.js';\nimport getButtonProps from './get-button-props.js';\nimport styles from './plain.module.scss';\nvar Plain = React.forwardRef(function (_ref, ref) {\n  var _classNames2;\n\n  var children = _ref.children,\n      _ref$isDisabled = _ref.isDisabled,\n      isDisabled = _ref$isDisabled === void 0 ? false : _ref$isDisabled,\n      to = _ref.to,\n      iconLeft = _ref.iconLeft,\n      iconRight = _ref.iconRight,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? 'primary' : _ref$theme,\n      _ref$type = _ref.type,\n      type = _ref$type === void 0 ? 'button' : _ref$type,\n      target = _ref.target,\n      _ref$shouldOpenInNewT = _ref.shouldOpenInNewTab,\n      shouldOpenInNewTab = _ref$shouldOpenInNewT === void 0 ? false : _ref$shouldOpenInNewT,\n      onClick = _ref.onClick,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseOver = _ref.onMouseOver,\n      onFocus = _ref.onFocus,\n      onMouseLeave = _ref.onMouseLeave,\n      onBlur = _ref.onBlur,\n      accessibilityLabel = _ref.accessibilityLabel,\n      dataTest = _ref.dataTest;\n  warning(children || accessibilityLabel || (iconLeft || iconRight) && children, 'The prop `accessibilityLabel` must be provided to the button or link if `iconLeft` or `iconRight` are provided but `children` is not. This helps users on screen readers navigate our content.');\n  var newChildren = children;\n\n  if (iconLeft || iconRight) {\n    var _classNames;\n\n    newChildren = React.createElement(\"span\", {\n      className: styles.flexCenter\n    }, iconLeft, children && React.createElement(\"span\", {\n      className: classNames((_classNames = {}, _defineProperty(_classNames, styles.textContainer, true), _defineProperty(_classNames, styles.textContainerLeft, iconLeft), _defineProperty(_classNames, styles.textContainerRight, iconRight), _classNames))\n    }, children), iconRight);\n  }\n\n  var commonProps = {\n    disabled: isDisabled,\n    children: newChildren,\n    className: classNames((_classNames2 = {}, _defineProperty(_classNames2, styles.plain, true), _defineProperty(_classNames2, styles.plainThemePrimary, theme === 'primary'), _defineProperty(_classNames2, styles.plainThemeSecondary, theme === 'secondary'), _defineProperty(_classNames2, styles.plainThemeTertiary, theme === 'tertiary'), _defineProperty(_classNames2, styles.plainThemeInherit, theme === 'inherit'), _classNames2)),\n    'aria-label': accessibilityLabel,\n    'data-test': dataTest,\n    ref: ref\n  };\n\n  if (to) {\n    return React.createElement(\"a\", _extends({}, commonProps, getAnchorProps({\n      isDisabled: isDisabled,\n      target: target,\n      shouldOpenInNewTab: shouldOpenInNewTab,\n      to: to,\n      onClick: onClick\n    }), {\n      ref: ref\n    }));\n  }\n\n  return React.createElement(\"button\", _extends({}, commonProps, getButtonProps({\n    onClick: onClick,\n    type: type,\n    onMouseEnter: onMouseEnter,\n    onMouseOver: onMouseOver,\n    onFocus: onFocus,\n    onMouseLeave: onMouseLeave,\n    onBlur: onBlur\n  }), {\n    ref: ref\n  }));\n});\nexport default Plain;","map":{"version":3,"sources":["../../../../components/UIAction/plain.tsx"],"names":["Plain","children","isDisabled","to","iconLeft","iconRight","theme","type","target","shouldOpenInNewTab","onClick","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","accessibilityLabel","dataTest","warning","newChildren","styles","flexCenter","classNames","commonProps","disabled","className","ref","getAnchorProps","getButtonProps"],"mappings":"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","sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport getAnchorProps from './get-anchor-props';\nimport getButtonProps from './get-button-props';\nimport styles from './plain.module.scss';\n\nconst Plain = React.forwardRef<HTMLAnchorElement | HTMLButtonElement, PropTypes>(\n    (\n        {\n            children,\n            isDisabled = false,\n            to,\n            iconLeft,\n            iconRight,\n            theme = 'primary',\n            type = 'button',\n            target,\n            shouldOpenInNewTab = false,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            accessibilityLabel,\n            dataTest,\n        },\n        ref,\n    ): JSX.Element => {\n        warning(\n            children || accessibilityLabel || ((iconLeft || iconRight) && children),\n            'The prop `accessibilityLabel` must be provided to the button or link if `iconLeft` or `iconRight` are provided but `children` is not. This helps users on screen readers navigate our content.',\n        );\n\n        let newChildren = children;\n\n        if (iconLeft || iconRight) {\n            newChildren = (\n                <span className={styles.flexCenter}>\n                    {iconLeft}\n\n                    {children && (\n                        <span\n                            className={classNames({\n                                [styles.textContainer]: true,\n                                [styles.textContainerLeft]: iconLeft,\n                                [styles.textContainerRight]: iconRight,\n                            })}\n                        >\n                            {children}\n                        </span>\n                    )}\n\n                    {iconRight}\n                </span>\n            );\n        }\n\n        const commonProps = {\n            disabled: isDisabled,\n            children: newChildren,\n            className: classNames({\n                [styles.plain]: true,\n                [styles.plainThemePrimary]: theme === 'primary',\n                [styles.plainThemeSecondary]: theme === 'secondary',\n                [styles.plainThemeTertiary]: theme === 'tertiary',\n                [styles.plainThemeInherit]: theme === 'inherit',\n            }),\n            'aria-label': accessibilityLabel,\n            'data-test': dataTest,\n            ref,\n        };\n\n        if (to) {\n            return (\n                <a // eslint-disable-line jsx-a11y/anchor-has-content\n                    {...commonProps}\n                    {...getAnchorProps({ isDisabled, target, shouldOpenInNewTab, to, onClick })}\n                    ref={ref as React.Ref<HTMLAnchorElement>}\n                />\n            );\n        }\n\n        return (\n            <button // eslint-disable-line react/button-has-type\n                {...commonProps}\n                {...getButtonProps({\n                    onClick,\n                    type,\n                    onMouseEnter,\n                    onMouseOver,\n                    onFocus,\n                    onMouseLeave,\n                    onBlur,\n                })}\n                ref={ref as React.Ref<HTMLButtonElement>}\n            />\n        );\n    },\n);\n\ninterface PropTypes {\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Sets the text color.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * Button’s of type `submit` will submit a form when used within a `form` element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    children?: React.ReactNode;\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: (event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTest?: string;\n}\n\nexport default Plain;\n"]},"metadata":{},"sourceType":"module"}