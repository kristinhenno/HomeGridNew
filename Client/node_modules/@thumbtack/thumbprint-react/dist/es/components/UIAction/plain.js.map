{"version":3,"file":"plain.js","sources":["../../../../components/UIAction/plain.tsx"],"sourcesContent":["import React from 'react';\nimport warning from 'warning';\nimport classNames from 'classnames';\nimport getAnchorProps from './get-anchor-props';\nimport getButtonProps from './get-button-props';\nimport styles from './plain.module.scss';\n\nconst Plain = React.forwardRef<HTMLAnchorElement | HTMLButtonElement, PropTypes>(\n    (\n        {\n            children,\n            isDisabled = false,\n            to,\n            iconLeft,\n            iconRight,\n            theme = 'primary',\n            type = 'button',\n            target,\n            shouldOpenInNewTab = false,\n            onClick,\n            onMouseEnter,\n            onMouseOver,\n            onFocus,\n            onMouseLeave,\n            onBlur,\n            accessibilityLabel,\n            dataTest,\n        },\n        ref,\n    ): JSX.Element => {\n        warning(\n            children || accessibilityLabel || ((iconLeft || iconRight) && children),\n            'The prop `accessibilityLabel` must be provided to the button or link if `iconLeft` or `iconRight` are provided but `children` is not. This helps users on screen readers navigate our content.',\n        );\n\n        let newChildren = children;\n\n        if (iconLeft || iconRight) {\n            newChildren = (\n                <span className={styles.flexCenter}>\n                    {iconLeft}\n\n                    {children && (\n                        <span\n                            className={classNames({\n                                [styles.textContainer]: true,\n                                [styles.textContainerLeft]: iconLeft,\n                                [styles.textContainerRight]: iconRight,\n                            })}\n                        >\n                            {children}\n                        </span>\n                    )}\n\n                    {iconRight}\n                </span>\n            );\n        }\n\n        const commonProps = {\n            disabled: isDisabled,\n            children: newChildren,\n            className: classNames({\n                [styles.plain]: true,\n                [styles.plainThemePrimary]: theme === 'primary',\n                [styles.plainThemeSecondary]: theme === 'secondary',\n                [styles.plainThemeTertiary]: theme === 'tertiary',\n                [styles.plainThemeInherit]: theme === 'inherit',\n            }),\n            'aria-label': accessibilityLabel,\n            'data-test': dataTest,\n            ref,\n        };\n\n        if (to) {\n            return (\n                <a // eslint-disable-line jsx-a11y/anchor-has-content\n                    {...commonProps}\n                    {...getAnchorProps({ isDisabled, target, shouldOpenInNewTab, to, onClick })}\n                    ref={ref as React.Ref<HTMLAnchorElement>}\n                />\n            );\n        }\n\n        return (\n            <button // eslint-disable-line react/button-has-type\n                {...commonProps}\n                {...getButtonProps({\n                    onClick,\n                    type,\n                    onMouseEnter,\n                    onMouseOver,\n                    onFocus,\n                    onMouseLeave,\n                    onBlur,\n                })}\n                ref={ref as React.Ref<HTMLButtonElement>}\n            />\n        );\n    },\n);\n\ninterface PropTypes {\n    isDisabled?: boolean;\n    /**\n     * Page to navigate to when the anchor is clicked.\n     */\n    to?: string;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render left of the text.\n     */\n    iconLeft?: React.ReactNode;\n    /**\n     * Icon from [Thumbprint Icons](/icons/) to render right of the text.\n     */\n    iconRight?: React.ReactNode;\n    /**\n     * Sets the text color.\n     */\n    theme?: 'primary' | 'secondary' | 'tertiary' | 'inherit';\n    /**\n     * Button’s of type `submit` will submit a form when used within a `form` element.\n     */\n    type?: 'button' | 'submit';\n    /**\n     * The anchor `target` attribute. Set this to `_blank` to open in a new tab, or to an arbitrary\n     * string to open the link in an `<iframe>` with the same `name`.\n     */\n    target?: string;\n    /**\n     * Opens the URL in a new tab when clicked.\n     */\n    shouldOpenInNewTab?: boolean;\n    children?: React.ReactNode;\n    /**\n     * Function that will run when the button is clicked on.\n     */\n    onClick?: (event: React.MouseEvent<HTMLButtonElement | HTMLAnchorElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button.\n     */\n    onMouseEnter?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers on the button. Unlike `onMouseEnter`, `onMouseOver`\n     * fires each time a child element receives focus.\n     */\n    onMouseOver?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the user hovers away from the button.\n     */\n    onMouseLeave?: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    /**\n     * Function that runs when the button receives focus.\n     */\n    onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n    /**\n     * Function that runs when the button loses focus.\n     */\n    onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n    /**\n     * Description of the button’s content. It is required if the button has an icon and no\n     * descriptive text.\n     */\n    accessibilityLabel?: string;\n    /**\n     * A selector hook into the React component for use in automated testing environments.\n     */\n    dataTest?: string;\n}\n\nexport default Plain;\n"],"names":["Plain","React","forwardRef","ref","children","isDisabled","to","iconLeft","iconRight","theme","type","target","shouldOpenInNewTab","onClick","onMouseEnter","onMouseOver","onFocus","onMouseLeave","onBlur","accessibilityLabel","dataTest","warning","newChildren","styles","flexCenter","classNames","textContainer","textContainerLeft","textContainerRight","commonProps","disabled","className","plain","plainThemePrimary","plainThemeSecondary","plainThemeTertiary","plainThemeInherit","getAnchorProps","getButtonProps"],"mappings":";;;;;;;;AAOA,IAAMA,KAAK,GAAGC,KAAK,CAACC,UAAN,CACV,gBAoBIC,GApBJ,EAqBkB;;;MAnBVC,QAmBU,QAnBVA,QAmBU;6BAlBVC,UAkBU;MAlBVA,UAkBU,gCAlBG,KAkBH;MAjBVC,EAiBU,QAjBVA,EAiBU;MAhBVC,QAgBU,QAhBVA,QAgBU;MAfVC,SAeU,QAfVA,SAeU;wBAdVC,KAcU;MAdVA,KAcU,2BAdF,SAcE;uBAbVC,IAaU;MAbVA,IAaU,0BAbH,QAaG;MAZVC,MAYU,QAZVA,MAYU;mCAXVC,kBAWU;MAXVA,kBAWU,sCAXW,KAWX;MAVVC,OAUU,QAVVA,OAUU;MATVC,YASU,QATVA,YASU;MARVC,WAQU,QARVA,WAQU;MAPVC,OAOU,QAPVA,OAOU;MANVC,YAMU,QANVA,YAMU;MALVC,MAKU,QALVA,MAKU;MAJVC,kBAIU,QAJVA,kBAIU;MAHVC,QAGU,QAHVA,QAGU;EACdC,OAAO,CACHjB,QAAQ,IAAIe,kBAAZ,IAAmC,CAACZ,QAAQ,IAAIC,SAAb,KAA2BJ,QAD3D,EAEH,gMAFG,CAAP;MAKIkB,WAAW,GAAGlB,QAAlB;;MAEIG,QAAQ,IAAIC,SAAhB,EAA2B;;;IACvBc,WAAW,GACP;MAAM,SAAS,EAAEC,MAAM,CAACC;OACnBjB,QADL,EAGKH,QAAQ,IACL;MACI,SAAS,EAAEqB,UAAU,iDAChBF,MAAM,CAACG,aADS,EACO,IADP,gCAEhBH,MAAM,CAACI,iBAFS,EAEWpB,QAFX,gCAGhBgB,MAAM,CAACK,kBAHS,EAGYpB,SAHZ;OAMpBJ,QAPL,CAJR,EAeKI,SAfL,CADJ;;;MAqBEqB,WAAW,GAAG;IAChBC,QAAQ,EAAEzB,UADM;IAEhBD,QAAQ,EAAEkB,WAFM;IAGhBS,SAAS,EAAEN,UAAU,mDAChBF,MAAM,CAACS,KADS,EACD,IADC,iCAEhBT,MAAM,CAACU,iBAFS,EAEWxB,KAAK,KAAK,SAFrB,iCAGhBc,MAAM,CAACW,mBAHS,EAGazB,KAAK,KAAK,WAHvB,iCAIhBc,MAAM,CAACY,kBAJS,EAIY1B,KAAK,KAAK,UAJtB,iCAKhBc,MAAM,CAACa,iBALS,EAKW3B,KAAK,KAAK,SALrB,iBAHL;kBAUFU,kBAVE;iBAWHC,QAXG;IAYhBjB,GAAG,EAAHA;GAZJ;;MAeIG,EAAJ,EAAQ;WAEA,sCACQuB,WADR,EAEQQ,cAAc,CAAC;MAAEhC,UAAU,EAAVA,UAAF;MAAcM,MAAM,EAANA,MAAd;MAAsBC,kBAAkB,EAAlBA,kBAAtB;MAA0CN,EAAE,EAAFA,EAA1C;MAA8CO,OAAO,EAAPA;KAA/C,CAFtB;MAGI,GAAG,EAAEV;OAJb;;;SAUA,2CACQ0B,WADR,EAEQS,cAAc,CAAC;IACfzB,OAAO,EAAPA,OADe;IAEfH,IAAI,EAAJA,IAFe;IAGfI,YAAY,EAAZA,YAHe;IAIfC,WAAW,EAAXA,WAJe;IAKfC,OAAO,EAAPA,OALe;IAMfC,YAAY,EAAZA,YANe;IAOfC,MAAM,EAANA;GAPc,CAFtB;IAWI,GAAG,EAAEf;KAZb;CA7EM,CAAd;;;;"}